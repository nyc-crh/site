# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

env:
  HUGO_VERSION: '0.111.3'
  DART_SASS_VERSION: '1.25.0'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Checkout default branch
        uses: actions/checkout@v3
      - name: Download Hugo v${{ env.HUGO_VERSION }}
        run: wget https://github.com/gohugoio/hugo/releases/download/v${{ env.HUGO_VERSION }}/hugo_extended_${{ env.HUGO_VERSION }}_linux-amd64.deb -O hugo_extended_${{ env.HUGO_VERSION }}_Linux-64bit.deb
      - name: Install Hugo v${{ env.HUGO_VERSION }}
        run: sudo dpkg -i hugo*.deb
      - name: Download Embedded Dart Sass v${{ env.DART_SASS_VERSION }}
        run: curl -LJO https://github.com/sass/dart-sass/releases/download/${{ env.DART_SASS_VERSION }}/sass_embedded-${{ env.DART_SASS_VERSION }}-linux-x64.tar.gz
      - name: Unpack Embedded Dart Sass v${{ env.DART_SASS_VERSION }}
        run: |
          tar -xvf sass_embedded-${{ env.DART_SASS_VERSION }}-linux-x64.tar.gz
          sass_embedded/dart-sass-embedded --version          
      - name: Add to the PATH
        run: echo "$GITHUB_WORKSPACE/sass_embedded" >> $GITHUB_PATH
      - name: Build site with Hugo
        run: hugo --gc --minify
      - name: Publish to CFP
        uses: cloudflare/pages-action@v1.0.0
        with:
          apiToken: ${{ secrets.CFP_API_TOKEN }}
          accountID: ${{ secrets.CF_ACCOUNT_ID }}
          projectName: 'hugo-site'
          # use **your** CFP project's name above
          directory: 'public'
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}